const express = require('express');
const router = express.Router();
const db = require('../database.js');
const createError = require('http-errors');

router.get('/restaurant/:restId', async function(req, res, next) {
  let rest_id = req.param("restId");
  // Retrieve the document from DB
  let doc = await db.collection("restaurants").findOne({restaurant_id: rest_id}, null);
  if (doc) {
    res.send(doc);
  } else {
    next(createError(404, "Restaurant not found."))
  }
});

router.post('/restaurant', async function(req, res, next) {
  // Ideally you should check the Schema with sometthing like JSV
  if (!req.body.name) {
    next(createError(400, "name field missing"))
  } else if (!req.body.address) {
    next(createError(400, "address field missing"))
  } else if (!req.body.borough) {
    next(createError(400, "borough field missing"))
  } else if (!req.body.cuisine) {
    next(createError(400, "cuisine field missing"))
  } else if (!req.body.grades) {
    next(createError(400, "grades field missing"))
  } else {
    let doc = req.body;
    // Add a random ID
    // It would be better to just use the ID generated by MongoDB since there's
    // a chance of conflicts, and checking for conflicts would add another
    // Database operation which is inefficient
    doc["restaurant_id"] = ""+Math.floor(Math.random()*100000000)
    let status = await db.collection("restaurants").insertOne(doc);
    if (status.result.ok) {
      res.send({status: "success", restaurant_id: doc["restaurant_id"]})
    }
  }
});

router.put('/restaurant/:restId', async function(req, res, next) {
  let rest_id = req.param("restId");
  let doc = req.body;
  // The schema of the document should be checked with JSV

  // We are using $set operator to overwrite the fields specifed by the user.
  // This might not be the desired outcome.
  // We can use other operations such add $addToSet for the grades field.
  // That would append the new grade to the grades array.
  // Thought just using set allows the user to remove grades from the
  // document in return of using more bandwidth
  let status = await db.collection("restaurants").findOneAndUpdate({restaurant_id: rest_id}, {$set:doc});
  console.log(status);
  if (status.ok) {
    if (status.lastErrorObject.n >= 1) {
      res.send({status: "success", restaurant_id: rest_id})
    } else {
      next(createError(404))
    }
  } else {
    next(createError(500, "Error updating database"))
  }
});

router.delete('/restaurant/:restId', async function(req, res, next) {
  let rest_id = req.param("restId");

  // Search and delete from database
  let status = await db.collection("restaurants").deleteOne({restaurant_id: rest_id});
  console.log(status);
  if (status.result.ok) {
    if (status.result.n >= 1) {
      // If document found and deleted, return success
      res.send({status: "success"})
    } else {
      // If no document found return 404
      next(createError(404, "Document not found"));
    }
  } else {
    // If problem in deleting return 500 database error
    next(createError(500, "Error updating database"));
  }
});

router.get('/cuisines', async function(req, res, next) {
  let cuisines = await db.collection("restaurants").distinct("cuisine");

  if (cuisines) {
    res.send(cuisines)
  } else {
    next(createError(500))
  }
});

module.exports = router;
